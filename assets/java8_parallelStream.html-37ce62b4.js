const e=JSON.parse(`{"key":"v-0ceb221a","path":"/blogs/java/java8_parallelStream.html","title":"关于Java8 parallelStream并发安全的思考","lang":"en-US","frontmatter":{"title":"关于Java8 parallelStream并发安全的思考","date":"2022-02-20T19:19:28.000Z","tag":["java8","stream","parallel"],"category":["back-end-java"],"published":true,"hideInList":false,"feature":null,"isTop":false,"description":"背景 Java8 的 stream 接口极大地减少了 for 循环写法的复杂性，stream 提供了 map/reduce/collect 等一系列聚合接口，还支持并发操作：parallelStream。 在爬虫开发过程中，经常会遇到遍历一个很大的集合做重复的操作，这时候如果使用串行执行会相当耗时，因此一般会采用多线程来提速。Java8 的 paral...","head":[["meta",{"property":"og:url","content":"https://clearlove443.github.io.v2/push_blog_v2/blogs/java/java8_parallelStream.html"}],["meta",{"property":"og:site_name","content":"clearlove's blog"}],["meta",{"property":"og:title","content":"关于Java8 parallelStream并发安全的思考"}],["meta",{"property":"og:description","content":"背景 Java8 的 stream 接口极大地减少了 for 循环写法的复杂性，stream 提供了 map/reduce/collect 等一系列聚合接口，还支持并发操作：parallelStream。 在爬虫开发过程中，经常会遇到遍历一个很大的集合做重复的操作，这时候如果使用串行执行会相当耗时，因此一般会采用多线程来提速。Java8 的 paral..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-21T06:46:28.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"java8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"parallel"}],["meta",{"property":"article:published_time","content":"2022-02-20T19:19:28.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T06:46:28.000Z"}]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"Java8 的 paralleStream 是线程安全的吗","slug":"java8-的-parallestream-是线程安全的吗","link":"#java8-的-parallestream-是线程安全的吗","children":[]},{"level":2,"title":"reduce 示例","slug":"reduce-示例","link":"#reduce-示例","children":[]},{"level":2,"title":"ForkJoinPool","slug":"forkjoinpool","link":"#forkjoinpool","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[{"level":3,"title":"Reduce 应当可拆分","slug":"reduce-应当可拆分","link":"#reduce-应当可拆分","children":[]},{"level":3,"title":"合理采用并行流","slug":"合理采用并行流","link":"#合理采用并行流","children":[]},{"level":3,"title":"编写单元测试","slug":"编写单元测试","link":"#编写单元测试","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1684643889000,"updatedTime":1684651588000,"contributors":[{"name":"ClearLove443","email":"1127280933@qq.com","commits":2}]},"readingTime":{"minutes":6.39,"words":1916},"filePathRelative":"blogs/java/java8_parallelStream.md","localizedDate":"February 20, 2022","autoDesc":true}`);export{e as data};
