const e=JSON.parse(`{"key":"v-e5762084","path":"/blogs/java/java8_stream_create_proccess.html","title":"Java8中 Stream创建流的四种方式、流的基本操作（流计算）","lang":"en-US","frontmatter":{"title":"Java8中 Stream创建流的四种方式、流的基本操作（流计算）","date":"2022-02-15T10:10:29.000Z","tag":["java8","stream"],"category":["back-end-java"],"published":true,"hideInList":false,"feature":null,"isTop":false,"description":"Java 对函数式编程的重视程度，看看 Java 8 加入函数式编程扩充多少功能就清楚了。Java 8 之所以费这么大功夫引入函数式编程，原因有二： 代码简洁函数式编程写出的代码简洁且意图明确，使用 stream 接口让你从此告别 for 循环。; 多核友好，Java 函数式编程使得编写并行程序从未如此简单，你需要的全部就是调用一下 parallel(...","head":[["meta",{"property":"og:url","content":"https://clearlove443.github.io.v2/v2/blogs/java/java8_stream_create_proccess.html"}],["meta",{"property":"og:site_name","content":"clearlove's blog"}],["meta",{"property":"og:title","content":"Java8中 Stream创建流的四种方式、流的基本操作（流计算）"}],["meta",{"property":"og:description","content":"Java 对函数式编程的重视程度，看看 Java 8 加入函数式编程扩充多少功能就清楚了。Java 8 之所以费这么大功夫引入函数式编程，原因有二： 代码简洁函数式编程写出的代码简洁且意图明确，使用 stream 接口让你从此告别 for 循环。; 多核友好，Java 函数式编程使得编写并行程序从未如此简单，你需要的全部就是调用一下 parallel(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-21T04:38:09.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:tag","content":"java8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:published_time","content":"2022-02-15T10:10:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-21T04:38:09.000Z"}]]},"headers":[{"level":2,"title":"Java 对函数式编程的重视程度，看看 Java 8 加入函数式编程扩充多少功能就清楚了。Java 8 之所以费这么大功夫引入函数式编程，原因有二：","slug":"java-对函数式编程的重视程度-看看-java-8-加入函数式编程扩充多少功能就清楚了。java-8-之所以费这么大功夫引入函数式编程-原因有二","link":"#java-对函数式编程的重视程度-看看-java-8-加入函数式编程扩充多少功能就清楚了。java-8-之所以费这么大功夫引入函数式编程-原因有二","children":[]},{"level":2,"title":"虽然大部分情况下 stream 是容器调用 Collection.stream()方法得到的，但 stream 和 collections 有以下不同：","slug":"虽然大部分情况下-stream-是容器调用-collection-stream-方法得到的-但-stream-和-collections-有以下不同","link":"#虽然大部分情况下-stream-是容器调用-collection-stream-方法得到的-但-stream-和-collections-有以下不同","children":[]},{"level":2,"title":"对 stream 的操作分为为两类，中间操作(intermediate operations)和结束操作(terminal operations)，二者特点是：","slug":"对-stream-的操作分为为两类-中间操作-intermediate-operations-和结束操作-terminal-operations-二者特点是","link":"#对-stream-的操作分为为两类-中间操作-intermediate-operations-和结束操作-terminal-operations-二者特点是","children":[]},{"level":2,"title":"Stream api","slug":"stream-api","link":"#stream-api","children":[]},{"level":2,"title":"一 创建里 Stream 流的若干种方式","slug":"一-创建里-stream-流的若干种方式","link":"#一-创建里-stream-流的若干种方式","children":[{"level":3,"title":"通过 Collection 得 Stream（）方法（串行流）或者 parallelStream（）方法（并行流）创建 Stream","slug":"通过-collection-得-stream-方法-串行流-或者-parallelstream-方法-并行流-创建-stream","link":"#通过-collection-得-stream-方法-串行流-或者-parallelstream-方法-并行流-创建-stream","children":[]},{"level":3,"title":"通过 Stream 类中得 of（）静态方法获取流","slug":"通过-stream-类中得-of-静态方法获取流","link":"#通过-stream-类中得-of-静态方法获取流","children":[]},{"level":3,"title":"通过 Arrays 中得静态方法 stream（）","slug":"通过-arrays-中得静态方法-stream","link":"#通过-arrays-中得静态方法-stream","children":[]},{"level":3,"title":"创建无限流(迭代、生成)","slug":"创建无限流-迭代、生成","link":"#创建无限流-迭代、生成","children":[]},{"level":3,"title":"使用 Pattern","slug":"使用-pattern","link":"#使用-pattern","children":[]},{"level":3,"title":"使用 Files.lines","slug":"使用-files-lines","link":"#使用-files-lines","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"二 Stream 中间操作","slug":"二-stream-中间操作","link":"#二-stream-中间操作","children":[{"level":3,"title":"1 筛选切片","slug":"_1-筛选切片","link":"#_1-筛选切片","children":[]}]},{"level":2,"title":"三 Stream 终止操作","slug":"三-stream-终止操作","link":"#三-stream-终止操作","children":[{"level":3,"title":"1 查找与匹配","slug":"_1-查找与匹配","link":"#_1-查找与匹配","children":[]},{"level":3,"title":"2 归约 : 可以将流中元素反复结合在一起，得到一个值","slug":"_2-归约-可以将流中元素反复结合在一起-得到一个值","link":"#_2-归约-可以将流中元素反复结合在一起-得到一个值","children":[]}]}],"git":{"createdTime":1684643889000,"updatedTime":1684643889000,"contributors":[{"name":"ClearLove443","email":"1127280933@qq.com","commits":1}]},"readingTime":{"minutes":10.87,"words":3260},"filePathRelative":"blogs/java/java8_stream_create_proccess.md","localizedDate":"February 15, 2022","autoDesc":true}`);export{e as data};
